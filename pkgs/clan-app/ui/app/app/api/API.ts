/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface API {
  cancel_task: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      task_id: string;
      op_key?: string;
    };
  };
  list_tasks: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: string[];
        }
      | Error;
    arguments: {
      op_key?: string;
    };
  };
  open_file: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: string[] | null;
        }
      | Error;
    arguments: {
      file_request: {
        mode: "open_file" | "select_folder" | "save" | "open_multiple_files";
        title?: string | null;
        filters?: {
          title?: string | null;
          mime_types?: string[] | null;
          patterns?: string[] | null;
          suffixes?: string[] | null;
        } | null;
        initial_file?: string | null;
        initial_folder?: string | null;
      };
      op_key?: string;
    };
  };
  get_directory: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            path: string;
            files?: {
              path: string;
              file_type: "file" | "directory" | "symlink";
            }[];
          };
        }
      | Error;
    arguments: {
      flake: {
        identifier: string;
        inputs_from?: string | null;
        hash?: string | null;
        store_path?: string | null;
      };
      op_key?: string;
    };
  };
  show_block_devices: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            blockdevices: {
              name: string;
              id_link: string;
              path: string;
              rm: string;
              size: string;
              ro: boolean;
              mountpoints: string[];
              type_: "disk";
            }[];
          };
        }
      | Error;
    arguments: {
      op_key?: string;
    };
  };
  show_machine_hardware_config: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: "nixos-facter" | "nixos-generate-config" | "none";
        }
      | Error;
    arguments: {
      machine: {
        name: string;
        flake: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        };
        nix_options?: string[];
        cached_deployment?: null | {
          [k: string]: unknown;
        };
        override_target_host?: null | string;
        override_build_host?: null | string;
        private_key?: string | null;
        host_key_check?: 0 | 1 | 2 | 3;
      };
      op_key?: string;
    };
  };
  show_machine_hardware_platform: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: string | null;
        }
      | Error;
    arguments: {
      machine: {
        name: string;
        flake: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        };
        nix_options?: string[];
        cached_deployment?: null | {
          [k: string]: unknown;
        };
        override_target_host?: null | string;
        override_build_host?: null | string;
        private_key?: string | null;
        host_key_check?: 0 | 1 | 2 | 3;
      };
      op_key?: string;
    };
  };
  generate_machine_hardware_info: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: "nixos-facter" | "nixos-generate-config" | "none";
        }
      | Error;
    arguments: {
      opts: {
        machine: {
          name: string;
          flake: {
            identifier: string;
            inputs_from?: string | null;
            hash?: string | null;
            store_path?: string | null;
          };
          nix_options?: string[];
          cached_deployment?: null | {
            [k: string]: unknown;
          };
          override_target_host?: null | string;
          override_build_host?: null | string;
          private_key?: string | null;
          host_key_check?: 0 | 1 | 2 | 3;
        };
        backend: "nixos-facter" | "nixos-generate-config" | "none";
        password?: string | null;
      };
      op_key?: string;
    };
  };
  list_modules: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            modulesPerSource: {
              [k: string]: {
                [k: string]: {
                  manifest: {
                    name: string;
                    description: string;
                    categories: string[];
                    features: {
                      [k: string]: boolean;
                    };
                  };
                  roles: {
                    [k: string]: null;
                  };
                };
              };
            };
            localModules: {
              [k: string]: {
                manifest: {
                  name: string;
                  description: string;
                  categories: string[];
                  features: {
                    [k: string]: boolean;
                  };
                };
                roles: {
                  [k: string]: null;
                };
              };
            };
          };
        }
      | Error;
    arguments: {
      base_path: string;
      op_key?: string;
    };
  };
  get_disk_schemas: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            [k: string]: {
              name: string;
              readme: string;
              frontmatter: {
                description: string;
                categories?: string[];
                features?: string[];
                constraints?: {
                  [k: string]: unknown;
                };
              };
              placeholders: {
                [k: string]: {
                  label: string;
                  options?: string[] | null;
                  required: boolean;
                };
              };
            };
          };
        }
      | Error;
    arguments: {
      machine: {
        name: string;
        flake: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        };
        nix_options?: string[];
        cached_deployment?: null | {
          [k: string]: unknown;
        };
        override_target_host?: null | string;
        override_build_host?: null | string;
        private_key?: string | null;
        host_key_check?: 0 | 1 | 2 | 3;
      };
      op_key?: string;
    };
  };
  set_machine_disk_schema: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      machine: {
        name: string;
        flake: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        };
        nix_options?: string[];
        cached_deployment?: null | {
          [k: string]: unknown;
        };
        override_target_host?: null | string;
        override_build_host?: null | string;
        private_key?: string | null;
        host_key_check?: 0 | 1 | 2 | 3;
      };
      schema_name: string;
      placeholders: {
        [k: string]: string;
      };
      force?: boolean;
      op_key?: string;
    };
  };
  show_mdns: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            services: {
              [k: string]: {
                interface: string;
                protocol: string;
                name: string;
                type_: string;
                domain: string;
                host?: string | null;
                ip?: string | null;
                port?: string | null;
                txt?: string | null;
              };
            };
          };
        }
      | Error;
    arguments: {
      op_key?: string;
    };
  };
  load_inventory_json: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            machines?: {
              [k: string]: {
                deploy?: {
                  targetHost?: string;
                };
                description?: string;
                icon?: string;
                machineClass?: "nixos" | "darwin";
                name?: string;
                tags?: string[];
              };
            };
            meta?: {
              name: string;
              description?: string;
              icon?: string;
            };
            modules?: {
              [k: string]: unknown;
            };
            services?: {
              [k: string]: {
                [k: string]: unknown;
              };
            };
            tags?: {
              [k: string]: unknown;
            };
          };
        }
      | Error;
    arguments: {
      flake: {
        identifier: string;
        inputs_from?: string | null;
        hash?: string | null;
        store_path?: string | null;
      };
      op_key?: string;
    };
  };
  patch_inventory_with: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      flake: {
        identifier: string;
        inputs_from?: string | null;
        hash?: string | null;
        store_path?: string | null;
      };
      section: string;
      content: {
        [k: string]: unknown;
      };
      op_key?: string;
    };
  };
  get_inventory_with_writeable_keys: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            writeables: {
              [k: string]: string[];
            };
            data_eval: {
              machines?: {
                [k: string]: {
                  deploy?: {
                    targetHost?: string;
                  };
                  description?: string;
                  icon?: string;
                  machineClass?: "nixos" | "darwin";
                  name?: string;
                  tags?: string[];
                };
              };
              meta?: {
                name: string;
                description?: string;
                icon?: string;
              };
              modules?: {
                [k: string]: unknown;
              };
              services?: {
                [k: string]: {
                  [k: string]: unknown;
                };
              };
              tags?: {
                [k: string]: unknown;
              };
            };
            data_disk: {
              machines?: {
                [k: string]: {
                  deploy?: {
                    targetHost?: string;
                  };
                  description?: string;
                  icon?: string;
                  machineClass?: "nixos" | "darwin";
                  name?: string;
                  tags?: string[];
                };
              };
              meta?: {
                name: string;
                description?: string;
                icon?: string;
              };
              modules?: {
                [k: string]: unknown;
              };
              services?: {
                [k: string]: {
                  [k: string]: unknown;
                };
              };
              tags?: {
                [k: string]: unknown;
              };
            };
          };
        }
      | Error;
    arguments: {
      flake: {
        identifier: string;
        inputs_from?: string | null;
        hash?: string | null;
        store_path?: string | null;
      };
      op_key?: string;
    };
  };
  set_inventory: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      inventory: {
        machines?: {
          [k: string]: {
            deploy?: {
              targetHost?: string;
            };
            description?: string;
            icon?: string;
            machineClass?: "nixos" | "darwin";
            name?: string;
            tags?: string[];
          };
        };
        meta?: {
          name: string;
          description?: string;
          icon?: string;
        };
        modules?: {
          [k: string]: unknown;
        };
        services?: {
          [k: string]: {
            [k: string]: unknown;
          };
        };
        tags?: {
          [k: string]: unknown;
        };
      };
      flake: {
        identifier: string;
        inputs_from?: string | null;
        hash?: string | null;
        store_path?: string | null;
      };
      message: string;
      commit?: boolean;
      op_key?: string;
    };
  };
  get_inventory: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            machines?: {
              [k: string]: {
                deploy?: {
                  targetHost?: string;
                };
                description?: string;
                icon?: string;
                machineClass?: "nixos" | "darwin";
                name?: string;
                tags?: string[];
              };
            };
            meta?: {
              name: string;
              description?: string;
              icon?: string;
            };
            modules?: {
              [k: string]: unknown;
            };
            services?: {
              [k: string]: {
                [k: string]: unknown;
              };
            };
            tags?: {
              [k: string]: unknown;
            };
          };
        }
      | Error;
    arguments: {
      flake: {
        identifier: string;
        inputs_from?: string | null;
        hash?: string | null;
        store_path?: string | null;
      };
      op_key?: string;
    };
  };
  set_machine: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      flake: {
        identifier: string;
        inputs_from?: string | null;
        hash?: string | null;
        store_path?: string | null;
      };
      machine_name: string;
      machine: {
        deploy?: {
          targetHost?: string;
        };
        description?: string;
        icon?: string;
        machineClass?: "nixos" | "darwin";
        name?: string;
        tags?: string[];
      };
      op_key?: string;
    };
  };
  list_machines: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            [k: string]: {
              deploy?: {
                targetHost?: string;
              };
              description?: string;
              icon?: string;
              machineClass?: "nixos" | "darwin";
              name?: string;
              tags?: string[];
            };
          };
        }
      | Error;
    arguments: {
      flake: {
        identifier: string;
        inputs_from?: string | null;
        hash?: string | null;
        store_path?: string | null;
      };
      op_key?: string;
    };
  };
  get_machine_details: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            machine: {
              deploy?: {
                targetHost?: string;
              };
              description?: string;
              icon?: string;
              machineClass?: "nixos" | "darwin";
              name?: string;
              tags?: string[];
            };
            hw_config?:
              | ("nixos-facter" | "nixos-generate-config" | "none")
              | null;
            disk_schema?: {
              schema_name: string;
              placeholders: {
                [k: string]: string;
              };
            } | null;
          };
        }
      | Error;
    arguments: {
      machine: {
        name: string;
        flake: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        };
        nix_options?: string[];
        cached_deployment?: null | {
          [k: string]: unknown;
        };
        override_target_host?: null | string;
        override_build_host?: null | string;
        private_key?: string | null;
        host_key_check?: 0 | 1 | 2 | 3;
      };
      op_key?: string;
    };
  };
  check_machine_online: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: "Online" | "Offline";
        }
      | Error;
    arguments: {
      machine: {
        name: string;
        flake: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        };
        nix_options?: string[];
        cached_deployment?: null | {
          [k: string]: unknown;
        };
        override_target_host?: null | string;
        override_build_host?: null | string;
        private_key?: string | null;
        host_key_check?: 0 | 1 | 2 | 3;
      };
      opts?: {
        timeout?: number;
        retries?: number;
      } | null;
      op_key?: string;
    };
  };
  get_generators_closure: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            name: string;
            files?: {
              id: string;
              name: string;
              secret?: boolean;
              deploy?: boolean;
              owner?: string;
              group?: string;
              mode?: number;
              needed_for?: string;
            }[];
            share?: boolean;
            prompts?: {
              name: string;
              description: string;
              prompt_type: "line" | "hidden" | "multiline";
              persist?: boolean;
              previous_value?: string | null;
            }[];
            dependencies?: string[];
            migrate_fact?: string | null;
          }[];
        }
      | Error;
    arguments: {
      machine_name: string;
      base_dir: string;
      regenerate?: boolean;
      include_previous_values?: boolean;
      op_key?: string;
    };
  };
  generate_vars_for_machine: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: boolean;
        }
      | Error;
    arguments: {
      machine_name: string;
      generators: string[];
      all_prompt_values: {
        [k: string]: {
          [k: string]: string;
        };
      };
      base_dir: string;
      no_sandbox?: boolean;
      op_key?: string;
    };
  };
  create_clan: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            flake_update?: {
              stdout: string;
              stderr: string;
              env?: {
                [k: string]: string;
              } | null;
              cwd: string;
              command_list: string[];
              returncode: number;
              msg?: string | null;
            } | null;
            git_init?: {
              stdout: string;
              stderr: string;
              env?: {
                [k: string]: string;
              } | null;
              cwd: string;
              command_list: string[];
              returncode: number;
              msg?: string | null;
            } | null;
            git_add?: {
              stdout: string;
              stderr: string;
              env?: {
                [k: string]: string;
              } | null;
              cwd: string;
              command_list: string[];
              returncode: number;
              msg?: string | null;
            } | null;
            git_config_username?: {
              stdout: string;
              stderr: string;
              env?: {
                [k: string]: string;
              } | null;
              cwd: string;
              command_list: string[];
              returncode: number;
              msg?: string | null;
            } | null;
            git_config_email?: {
              stdout: string;
              stderr: string;
              env?: {
                [k: string]: string;
              } | null;
              cwd: string;
              command_list: string[];
              returncode: number;
              msg?: string | null;
            } | null;
          };
        }
      | Error;
    arguments: {
      opts: {
        dest: string;
        template_name: string;
        src_flake?: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        } | null;
        input_prio?: {
          input_names: string[];
          prioritize_self?: boolean;
        } | null;
        setup_git?: boolean;
        initial?: {
          machines?: {
            [k: string]: {
              deploy?: {
                targetHost?: string;
              };
              description?: string;
              icon?: string;
              machineClass?: "nixos" | "darwin";
              name?: string;
              tags?: string[];
            };
          };
          meta?: {
            name: string;
            description?: string;
            icon?: string;
          };
          modules?: {
            [k: string]: unknown;
          };
          services?: {
            [k: string]: {
              [k: string]: unknown;
            };
          };
          tags?: {
            [k: string]: unknown;
          };
        } | null;
        update_clan?: boolean;
      };
      op_key?: string;
    };
  };
  show_clan_meta: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            name: string;
            description?: string;
            icon?: string;
          };
        }
      | Error;
    arguments: {
      flake: {
        identifier: string;
        inputs_from?: string | null;
        hash?: string | null;
        store_path?: string | null;
      };
      op_key?: string;
    };
  };
  update_clan_meta: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            machines?: {
              [k: string]: {
                deploy?: {
                  targetHost?: string;
                };
                description?: string;
                icon?: string;
                machineClass?: "nixos" | "darwin";
                name?: string;
                tags?: string[];
              };
            };
            meta?: {
              name: string;
              description?: string;
              icon?: string;
            };
            modules?: {
              [k: string]: unknown;
            };
            services?: {
              [k: string]: {
                [k: string]: unknown;
              };
            };
            tags?: {
              [k: string]: unknown;
            };
          };
        }
      | Error;
    arguments: {
      options: {
        flake: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        };
        meta: {
          name: string;
          description?: string;
          icon?: string;
        };
      };
      op_key?: string;
    };
  };
  maybe_get_admin_public_key: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: {
            pubkey: string;
            username: string;
            key_type: 1 | 2;
          } | null;
        }
      | Error;
    arguments: {
      op_key?: string;
    };
  };
  list_possible_languages: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: string[];
        }
      | Error;
    arguments: {
      op_key?: string;
    };
  };
  list_possible_keymaps: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: string[];
        }
      | Error;
    arguments: {
      op_key?: string;
    };
  };
  flash_machine: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      machine: {
        name: string;
        flake: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        };
        nix_options?: string[];
        cached_deployment?: null | {
          [k: string]: unknown;
        };
        override_target_host?: null | string;
        override_build_host?: null | string;
        private_key?: string | null;
        host_key_check?: 0 | 1 | 2 | 3;
      };
      mode: string;
      disks: {
        name: string;
        device: string;
      }[];
      system_config: {
        language?: string | null;
        keymap?: string | null;
        ssh_keys_path?: string[] | null;
      };
      dry_run: boolean;
      write_efi_boot_entries: boolean;
      debug: boolean;
      extra_args?: string[] | null;
      graphical?: boolean;
      op_key?: string;
    };
  };
  create_machine: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      opts: {
        clan_dir: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        };
        machine: {
          deploy?: {
            targetHost?: string;
          };
          description?: string;
          icon?: string;
          machineClass?: "nixos" | "darwin";
          name?: string;
          tags?: string[];
        };
        target_host?: string | null;
        input_prio?: {
          input_names: string[];
          prioritize_self?: boolean;
        } | null;
        template_name?: string | null;
      };
      commit?: boolean;
      op_key?: string;
    };
  };
  delete_machine: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      machine: {
        name: string;
        flake: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        };
        nix_options?: string[];
        cached_deployment?: null | {
          [k: string]: unknown;
        };
        override_target_host?: null | string;
        override_build_host?: null | string;
        private_key?: string | null;
        host_key_check?: 0 | 1 | 2 | 3;
      };
      op_key?: string;
    };
  };
  install_machine: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      opts: {
        machine: {
          name: string;
          flake: {
            identifier: string;
            inputs_from?: string | null;
            hash?: string | null;
            store_path?: string | null;
          };
          nix_options?: string[];
          cached_deployment?: null | {
            [k: string]: unknown;
          };
          override_target_host?: null | string;
          override_build_host?: null | string;
          private_key?: string | null;
          host_key_check?: 0 | 1 | 2 | 3;
        };
        kexec?: string | null;
        debug?: boolean;
        no_reboot?: boolean;
        phases?: string | null;
        build_on?: ("auto" | "local" | "remote") | null;
        nix_options?: string[];
        update_hardware_config?:
          | "nixos-facter"
          | "nixos-generate-config"
          | "none";
        password?: string | null;
        identity_file?: string | null;
        use_tor?: boolean;
      };
      op_key?: string;
    };
  };
  deploy_machine: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      machine: {
        name: string;
        flake: {
          identifier: string;
          inputs_from?: string | null;
          hash?: string | null;
          store_path?: string | null;
        };
        nix_options?: string[];
        cached_deployment?: null | {
          [k: string]: unknown;
        };
        override_target_host?: null | string;
        override_build_host?: null | string;
        private_key?: string | null;
        host_key_check?: 0 | 1 | 2 | 3;
      };
      op_key?: string;
    };
  };
  get_vars: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            id: string;
            name: string;
            secret?: boolean;
            deploy?: boolean;
            owner?: string;
            group?: string;
            mode?: number;
            needed_for?: string;
          }[];
        }
      | Error;
    arguments: {
      base_dir: string;
      machine_name: string;
      op_key?: string;
    };
  };
  get_generators: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            name: string;
            files?: {
              id: string;
              name: string;
              secret?: boolean;
              deploy?: boolean;
              owner?: string;
              group?: string;
              mode?: number;
              needed_for?: string;
            }[];
            share?: boolean;
            prompts?: {
              name: string;
              description: string;
              prompt_type: "line" | "hidden" | "multiline";
              persist?: boolean;
              previous_value?: string | null;
            }[];
            dependencies?: string[];
            migrate_fact?: string | null;
          }[];
        }
      | Error;
    arguments: {
      base_dir: string;
      machine_name: string;
      op_key?: string;
    };
  };
  set_prompts: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      base_dir: string;
      machine_name: string;
      updates: {
        generator: string;
        prompt_values: {
          [k: string]: string;
        };
      }[];
      op_key?: string;
    };
  };
  get_var: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data: {
            id: string;
            name: string;
            secret?: boolean;
            deploy?: boolean;
            owner?: string;
            group?: string;
            mode?: number;
            needed_for?: string;
          };
        }
      | Error;
    arguments: {
      base_dir: string;
      machine_name: string;
      var_id: string;
      op_key?: string;
    };
  };
  keygen: {
    return:
      | {
          op_key: string;
          /**
           * The status of the response.
           */
          status: "success";
          data?: null;
        }
      | Error;
    arguments: {
      flake_dir: string;
      user?: string | null;
      force?: boolean;
      op_key?: string;
    };
  };
}
export interface Error {
  op_key: string;
  status: "error";
  errors: {
    message: string;
    description?: string | null;
    location?: string[] | null;
  }[];
}
